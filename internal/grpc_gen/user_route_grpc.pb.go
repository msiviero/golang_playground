// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: user_route.proto

package grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRouteClient is the client API for UserRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRouteClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserMessage, error)
	PutUser(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*EmptyReply, error)
}

type userRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRouteClient(cc grpc.ClientConnInterface) UserRouteClient {
	return &userRouteClient{cc}
}

func (c *userRouteClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserMessage, error) {
	out := new(UserMessage)
	err := c.cc.Invoke(ctx, "/UserRoute/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRouteClient) PutUser(ctx context.Context, in *UserMessage, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/UserRoute/PutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRouteServer is the server API for UserRoute service.
// All implementations must embed UnimplementedUserRouteServer
// for forward compatibility
type UserRouteServer interface {
	GetUser(context.Context, *UserRequest) (*UserMessage, error)
	PutUser(context.Context, *UserMessage) (*EmptyReply, error)
	mustEmbedUnimplementedUserRouteServer()
}

// UnimplementedUserRouteServer must be embedded to have forward compatible implementations.
type UnimplementedUserRouteServer struct {
}

func (UnimplementedUserRouteServer) GetUser(context.Context, *UserRequest) (*UserMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserRouteServer) PutUser(context.Context, *UserMessage) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (UnimplementedUserRouteServer) mustEmbedUnimplementedUserRouteServer() {}

// UnsafeUserRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRouteServer will
// result in compilation errors.
type UnsafeUserRouteServer interface {
	mustEmbedUnimplementedUserRouteServer()
}

func RegisterUserRouteServer(s grpc.ServiceRegistrar, srv UserRouteServer) {
	s.RegisterService(&UserRoute_ServiceDesc, srv)
}

func _UserRoute_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRouteServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserRoute/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRouteServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoute_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRouteServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserRoute/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRouteServer).PutUser(ctx, req.(*UserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoute_ServiceDesc is the grpc.ServiceDesc for UserRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserRoute",
	HandlerType: (*UserRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserRoute_GetUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _UserRoute_PutUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_route.proto",
}
